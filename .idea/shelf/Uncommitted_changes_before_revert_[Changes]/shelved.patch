Index: app/src/main/java/com/example/budgetmadness/AddExpensesActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.budgetmadness\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.*\r\nimport  java.util.*\r\nimport android.app.DatePickerDialog\r\nimport android.content.Intent\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport android.app.AlertDialog\r\nimport android.graphics.Bitmap\r\nimport android.net.Uri\r\nimport android.provider.MediaStore\r\nimport androidx.core.content.FileProvider\r\nimport java.io.File\r\n\r\n\r\nclass AddExpensesActivity : AppCompatActivity() {\r\n\r\n    private lateinit var expenseNameInput: EditText\r\n    private lateinit var expenseAmountInput: EditText\r\n    private lateinit var paymentMethodInput: EditText\r\n    private lateinit var categorySpinner: Spinner\r\n    private lateinit var selectDataButton: Button\r\n    private lateinit var uploadReceiptButton: Button\r\n    private lateinit var addExpenseButton: Button\r\n    private val PICK_IMAGE_REQUEST = 1\r\n    private val REQUEST_IMAGE_CAPTURE = 2\r\n    private var selectedImageBytes: ByteArray? = null\r\n    private var imageUri: Uri? = null\r\n\r\n    private var selectedDate: String = \"\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge()\r\n        setContentView(R.layout.activity_add_expenses)\r\n\r\n        val dbHelper = BudgetDatabaseHelper(this)\r\n\r\n        //LINK VIEWS\r\n        expenseNameInput = findViewById(R.id.expenseNameInput)\r\n        expenseAmountInput = findViewById(R.id.expenseAmountInput)\r\n        paymentMethodInput = findViewById(R.id.paymentMethodInput)\r\n        categorySpinner = findViewById(R.id.categorySpinner)\r\n        selectDataButton = findViewById(R.id.selectDateButton)\r\n        uploadReceiptButton = findViewById(R.id.uploadReceiptButton)\r\n        addExpenseButton = findViewById(R.id.addExpenseButton)\r\n\r\n        //SPINNER SETUP\r\n        val categories = dbHelper.getAllCategories()\r\n        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\n        categorySpinner.adapter = adapter\r\n\r\n        //DATE PICKER\r\n        selectDataButton.setOnClickListener {\r\n            val calendar = Calendar.getInstance()\r\n            val year = calendar.get(Calendar.YEAR)\r\n            val month = calendar.get(Calendar.MONTH)\r\n            val day = calendar.get(Calendar.DAY_OF_MONTH)\r\n\r\n            val datePickerDialog = DatePickerDialog(this, { _, y, m, d ->\r\n                selectedDate = \"$y-${m + 1}-$d\"\r\n                selectDataButton.text = selectedDate\r\n            }, year, month, day)\r\n\r\n            datePickerDialog.show()\r\n        }\r\n\r\n\r\n        //RECEIPT BUTTON CLICK\r\n        uploadReceiptButton.setOnClickListener {\r\n            val options = arrayOf(\"Take Photo\", \"Choose from Gallery\")\r\n\r\n            AlertDialog.Builder(this)\r\n                .setTitle(\"Add Receipt Image\")\r\n                .setItems(options) { _, which ->\r\n                    when (which) {\r\n                        0 -> openCamera()\r\n                        1 -> openGallery()\r\n                    }\r\n                }\r\n                .show()\r\n        }\r\n\r\n        //ADD EXPENSE\r\n        addExpenseButton.setOnClickListener {\r\n            val name = expenseNameInput.text.toString()\r\n            val amount = expenseAmountInput.text.toString().toDoubleOrNull() ?: 0.0\r\n            val paymentMethod = paymentMethodInput.text.toString()\r\n            val category = categorySpinner.selectedItem?.toString() ?: \"\"\r\n            val date = selectedDate\r\n\r\n            if (name.isNotEmpty() && amount > 0 && paymentMethod.isNotEmpty() && category.isNotEmpty() && date.isNotEmpty()) {\r\n                dbHelper.insertExpense(name, amount, paymentMethod, category, date)\r\n                Toast.makeText(this, \"Expense added!\", Toast.LENGTH_SHORT).show()\r\n                clearInputs()\r\n            } else {\r\n                Toast.makeText(this, \"Please fill in all fields\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n        // Bottom navigation\r\n        val bottomNav = findViewById<BottomNavigationView>(R.id.bottomNavigationView)\r\n        bottomNav.setOnItemSelectedListener { item ->\r\n            when (item.itemId) {\r\n                R.id.nav_income -> {\r\n                    startActivity(Intent(this, IncomeActivity::class.java))\r\n                    true\r\n                }\r\n                R.id.nav_home -> {\r\n                    startActivity(Intent(this, StarterPageActivity::class.java))\r\n                    true\r\n                }\r\n                R.id.nav_add -> {\r\n                    startActivity(Intent(this, AddExpensesActivity::class.java))\r\n                    true\r\n                }\r\n                R.id.nav_open_menu -> {\r\n                    startActivity(Intent(this, MenuActivity::class.java))\r\n                    true\r\n                }\r\n\r\n                else -> false\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    private fun clearInputs() {\r\n\r\n        expenseNameInput.text.clear()\r\n        expenseAmountInput.text.clear()\r\n        paymentMethodInput.text.clear()\r\n        categorySpinner.setSelection(0)\r\n        selectDataButton.text = \"Select Date\"\r\n        selectedDate = \"\"\r\n    }\r\n    private fun openGallery() {\r\n        val intent = Intent(Intent.ACTION_PICK)\r\n        intent.type = \"image/*\"\r\n        startActivityForResult(intent, PICK_IMAGE_REQUEST)\r\n    }\r\n\r\n    private fun openCamera() {\r\n        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\r\n\r\n        val photoFile = File.createTempFile(\"receipt_\", \".jpg\", cacheDir)\r\n        imageUri = FileProvider.getUriForFile(this, \"$packageName.provider\", photoFile)\r\n\r\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri)\r\n        startActivityForResult(intent, REQUEST_IMAGE_CAPTURE)\r\n    }\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (resultCode == RESULT_OK) {\r\n            when (requestCode) {\r\n                PICK_IMAGE_REQUEST -> {\r\n                    val uri = data?.data\r\n                    uri?.let {\r\n                        selectedImageBytes = contentResolver.openInputStream(it)?.readBytes()\r\n                        Toast.makeText(this, \"Image selected from gallery\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n                REQUEST_IMAGE_CAPTURE -> {\r\n                    imageUri?.let {\r\n                        selectedImageBytes = contentResolver.openInputStream(it)?.readBytes()\r\n                        Toast.makeText(this, \"Photo captured\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/budgetmadness/AddExpensesActivity.kt b/app/src/main/java/com/example/budgetmadness/AddExpensesActivity.kt
--- a/app/src/main/java/com/example/budgetmadness/AddExpensesActivity.kt	(revision f872a60bbe291cbf399cda600484762cd950d9d2)
+++ b/app/src/main/java/com/example/budgetmadness/AddExpensesActivity.kt	(date 1747065415406)
@@ -16,7 +16,6 @@
 import androidx.core.content.FileProvider
 import java.io.File
 
-
 class AddExpensesActivity : AppCompatActivity() {
 
     private lateinit var expenseNameInput: EditText
@@ -129,6 +128,8 @@
         }
 
     }
+
+    @SuppressLint("SetTextI18n")
     private fun clearInputs() {
 
         expenseNameInput.text.clear()
@@ -153,27 +154,6 @@
         intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri)
         startActivityForResult(intent, REQUEST_IMAGE_CAPTURE)
     }
-    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
-        super.onActivityResult(requestCode, resultCode, data)
-
-        if (resultCode == RESULT_OK) {
-            when (requestCode) {
-                PICK_IMAGE_REQUEST -> {
-                    val uri = data?.data
-                    uri?.let {
-                        selectedImageBytes = contentResolver.openInputStream(it)?.readBytes()
-                        Toast.makeText(this, "Image selected from gallery", Toast.LENGTH_SHORT).show()
-                    }
-                }
-                REQUEST_IMAGE_CAPTURE -> {
-                    imageUri?.let {
-                        selectedImageBytes = contentResolver.openInputStream(it)?.readBytes()
-                        Toast.makeText(this, "Photo captured", Toast.LENGTH_SHORT).show()
-                    }
-                }
-            }
-        }
-    }
 }
 
 
Index: app/src/main/java/com/example/budgetmadness/BudgetDatabaseHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.budgetmadness\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Context\r\nimport android.database.Cursor\r\nimport android.database.sqlite.SQLiteConstraintException\r\nimport android.database.sqlite.SQLiteDatabase\r\nimport android.database.sqlite.SQLiteOpenHelper\r\n\r\nclass BudgetDatabaseHelper(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {\r\n    companion object {\r\n        private const val DATABASE_NAME = \"budget.db\"\r\n        private const val DATABASE_VERSION = 1\r\n\r\n        const val TABLE_CATEGORIES = \"Categories\"\r\n        const val COLUMN_ID = \"id\"\r\n        const val COLUMN_CATEGORY_NAME = \"name\"\r\n\r\n        const val TABLE_EXPENSES = \"expenses\"\r\n        const val EXPENSE_ID = \"_id\"\r\n        const val EXPENSE_NAME = \"name\"\r\n        const val EXPENSE_AMOUNT = \"amount\"\r\n        const val EXPENSE_PAYMENT_METHOD = \"payment_method\"\r\n        const val EXPENSE_CATEGORY = \"category\"\r\n        const val EXPENSE_DATE = \"date\"\r\n    }\r\n\r\n    override fun onCreate(db: SQLiteDatabase) {\r\n        // Create tables\r\n        db.execSQL(\"\"\"\r\n            CREATE TABLE $TABLE_CATEGORIES (\r\n                $COLUMN_ID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                $COLUMN_CATEGORY_NAME TEXT UNIQUE\r\n            )\r\n        \"\"\".trimIndent())\r\n\r\n        db.execSQL(\"\"\"\r\n            CREATE TABLE $TABLE_EXPENSES (\r\n                $EXPENSE_ID INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                $EXPENSE_NAME TEXT NOT NULL,\r\n                $EXPENSE_AMOUNT REAL NOT NULL,\r\n                $EXPENSE_PAYMENT_METHOD TEXT NOT NULL,\r\n                $EXPENSE_CATEGORY TEXT NOT NULL,\r\n                $EXPENSE_DATE TEXT NOT NULL\r\n            )\r\n        \"\"\".trimIndent())\r\n    }\r\n\r\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\r\n        db.execSQL(\"DROP TABLE IF EXISTS $TABLE_CATEGORIES\")\r\n        db.execSQL(\"DROP TABLE IF EXISTS $TABLE_EXPENSES\")\r\n        onCreate(db)\r\n    }\r\n\r\n    // Insert a new category\r\n    fun insertCategory(category: String): Boolean {\r\n        val db = writableDatabase\r\n\r\n        if (category.isBlank()) return false\r\n\r\n        val contentValues = ContentValues().apply {\r\n            put(COLUMN_CATEGORY_NAME, category.trim().lowercase()) // Normalize\r\n        }\r\n\r\n        return try {\r\n            val result = db.insertOrThrow(TABLE_CATEGORIES, null, contentValues)\r\n            result != -1L\r\n        } catch (e: SQLiteConstraintException) {\r\n            false\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            false\r\n        } finally {\r\n            db.close()\r\n        }\r\n    }\r\n\r\n    // Get all categories\r\n    fun getAllCategories(): List<String> {\r\n        val categoryList = mutableListOf<String>()\r\n        val db = readableDatabase\r\n        val cursor = db.rawQuery(\"SELECT $COLUMN_CATEGORY_NAME FROM $TABLE_CATEGORIES\", null)\r\n\r\n        cursor.use {\r\n            while (it.moveToNext()) {\r\n                categoryList.add(it.getString(0))\r\n            }\r\n        }\r\n\r\n        return categoryList\r\n    }\r\n\r\n    // Get the latest expense\r\n    fun getLatestExpense(): Double {\r\n        val db = readableDatabase\r\n        val cursor = db.rawQuery(\r\n            \"SELECT $EXPENSE_AMOUNT FROM $TABLE_EXPENSES ORDER BY $EXPENSE_ID DESC LIMIT 1\",\r\n            null\r\n        )\r\n\r\n        var latestExpense = 0.0\r\n        cursor.use {\r\n            if (it.moveToFirst()) {\r\n                latestExpense = it.getDouble(0)\r\n            }\r\n        }\r\n\r\n        return latestExpense\r\n    }\r\n\r\n    // Get all expenses\r\n    fun getAllExpenses(): List<ExpenseEntry> {\r\n        val db = readableDatabase\r\n        val list = mutableListOf<ExpenseEntry>()\r\n        val cursor = db.rawQuery(\r\n            \"SELECT $EXPENSE_NAME, $EXPENSE_AMOUNT, $EXPENSE_DATE FROM $TABLE_EXPENSES ORDER BY $EXPENSE_ID DESC\",\r\n            null\r\n        )\r\n\r\n        cursor.use {\r\n            while (it.moveToNext()) {\r\n                val name = it.getString(0)\r\n                val amount = it.getDouble(1)\r\n                val date = it.getString(2)\r\n                list.add(ExpenseEntry(name, amount, date))\r\n            }\r\n        }\r\n\r\n        return list\r\n    }\r\n\r\n    // Insert a new expense\r\n    fun insertExpense(name: String, amount: Double, paymentMethod: String, category: String, date: String) {\r\n        val db = writableDatabase\r\n        val values = ContentValues().apply {\r\n            put(EXPENSE_NAME, name)\r\n            put(EXPENSE_AMOUNT, amount)\r\n            put(EXPENSE_PAYMENT_METHOD, paymentMethod)\r\n            put(EXPENSE_CATEGORY, category)\r\n            put(EXPENSE_DATE, date)\r\n        }\r\n\r\n        db.insert(TABLE_EXPENSES, null, values)\r\n        db.close()\r\n    }\r\n\r\n    // Delete a category\r\n    fun deleteCategory(category: String): Boolean {\r\n        val db = writableDatabase\r\n\r\n        // Normalize category name\r\n        val rowsAffected = db.delete(\r\n            TABLE_CATEGORIES,\r\n            \"$COLUMN_CATEGORY_NAME = ?\",\r\n            arrayOf(category.trim().lowercase())\r\n        )\r\n\r\n        db.close()\r\n        return rowsAffected > 0\r\n    }\r\n\r\n    // Get total expenses\r\n    fun getTotalExpenses(): Double {\r\n        val db = readableDatabase\r\n        val cursor = db.rawQuery(\"SELECT SUM($EXPENSE_AMOUNT) FROM $TABLE_EXPENSES\", null)\r\n\r\n        var total = 0.0\r\n        cursor.use {\r\n            if (it.moveToFirst()) {\r\n                total = it.getDouble(0)\r\n            }\r\n        }\r\n\r\n        db.close()\r\n        return total\r\n    }\r\n\r\n    data class ExpenseEntry(val name: String, val amount: Double, val date: String)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/budgetmadness/BudgetDatabaseHelper.kt b/app/src/main/java/com/example/budgetmadness/BudgetDatabaseHelper.kt
--- a/app/src/main/java/com/example/budgetmadness/BudgetDatabaseHelper.kt	(revision f872a60bbe291cbf399cda600484762cd950d9d2)
+++ b/app/src/main/java/com/example/budgetmadness/BudgetDatabaseHelper.kt	(date 1747046975962)
@@ -42,6 +42,7 @@
                 $EXPENSE_PAYMENT_METHOD TEXT NOT NULL,
                 $EXPENSE_CATEGORY TEXT NOT NULL,
                 $EXPENSE_DATE TEXT NOT NULL
+                image BLOB  
             )
         """.trimIndent())
     }
